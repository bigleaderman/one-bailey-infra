apiVersion: v1
kind: Namespace
metadata:
  name: db
---
apiVersion: v1
kind: Service
metadata:
  name: questdb-hl
  namespace: db
  labels:
    app: questdb
spec:
  clusterIP: None
  ports:
    - name: rest
      port: 9000
      targetPort: 9000
    - name: pg
      port: 8812
      targetPort: 8812
    - name: ilp
      port: 9009
      targetPort: 9009
    - name: health
      port: 9003
      targetPort: 9003
  selector:
    app: questdb
---
apiVersion: v1
kind: Service
metadata:
  name: questdb
  namespace: db
  labels:
    app: questdb
    metrics: "enabled"
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "9003"
spec:
  type: ClusterIP
  ports:
    - name: rest
      port: 9000
      targetPort: 9000
    - name: pg
      port: 8812
      targetPort: 8812
    - name: ilp
      port: 9009
      targetPort: 9009
    - name: health
      port: 9003
      targetPort: 9003
  selector:
    app: questdb
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: questdb
  namespace: db
  labels:
    app: questdb
spec:
  serviceName: questdb-hl
  replicas: 1
  selector:
    matchLabels:
      app: questdb
  template:
    metadata:
      labels:
        app: questdb
    spec:
      nodeSelector:
        kubernetes.io/hostname: worker-03
      securityContext:
        fsGroup: 1000
      containers:
        - name: questdb
          image: questdb/questdb:9.0.2
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000   # REST/Web
            - containerPort: 8812   # PG wire
            - containerPort: 9009   # ILP
            - containerPort: 9003   # Health/Metrics
          env:
            - name: QDB_HTTP_MIN_ENABLED
              value: "true"
            - name: QDB_METRICS_ENABLED
              value: "true"
          readinessProbe:
            httpGet:
              path: /
              port: 9003
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /
              port: 9003
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 2
            failureThreshold: 6
          resources:
            requests:
              cpu: "200m"
              memory: "1Gi"
            limits:
              cpu: "1"
              memory: "4Gi"
          volumeMounts:
            - name: data
              mountPath: /var/lib/questdb
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: fast
        resources:
          requests:
            storage: 50Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: questdb-ingress
  namespace: db
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: nginx
  tls:
    - hosts: [onebailey.shop]
      secretName: argocd-tls
  rules:
    - host: onebailey.shop
      http:
        paths:
          - path: /questDB(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: questdb
                port:
                  number: 9000
