# postgres-core.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: db
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-auth
  namespace: db
type: Opaque
stringData:
  POSTGRES_DB: appdb
  POSTGRES_USER: appuser
  POSTGRES_PASSWORD: "change-this-strong-pass"
  DATA_SOURCE_NAME: "postgresql://appuser:change-this-strong-pass@127.0.0.1:5432/appdb?sslmode=disable"
---
# 내부용 ClusterIP (앱들이 사용)
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: db
  labels: { app: postgres }
spec:
  type: ClusterIP
  selector: { app: postgres }
  ports:
    - name: pg
      port: 5432
      targetPort: pg
---
# StatefulSet용 Headless (Pod별 DNS)
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: db
  labels: { app: postgres }
spec:
  clusterIP: None
  selector: { app: postgres }
  ports:
    - name: pg
      port: 5432
      targetPort: pg
---
# 외부 접속용 NodePort (항상 열림)
apiVersion: v1
kind: Service
metadata:
  name: postgres-public
  namespace: db
  labels: { app: postgres }
spec:
  type: NodePort
  selector: { app: postgres }
  ports:
    - name: pg
      port: 5432
      targetPort: pg
      nodePort: 30432         # 비는 포트로 조정 가능
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: db
  labels: { app: postgres }
spec:
  serviceName: postgres-headless
  replicas: 1
  selector:
    matchLabels: { app: postgres }
  template:
    metadata:
      labels: { app: postgres }
    spec:
      nodeSelector:
        node-role.kubernetes.io/storage-node: "true"   # worker-03 고정
      securityContext:
        fsGroup: 999
      initContainers:
        - name: init-perm-and-pghba
          image: busybox:1.36
          command:
            - sh
            - -lc
            - |
              chown -R 999:999 /var/lib/postgresql/data || true
              # 모든 외부/내부 허용 + SCRAM 강제 (IP 고정 허용 제거 요청 반영)
              echo 'host all all 0.0.0.0/0 scram-sha-256' >> /var/lib/postgresql/data/pg_hba.conf || true
              echo 'host all all ::/0 scram-sha-256' >> /var/lib/postgresql/data/pg_hba.conf || true
      containers:
        - name: postgres
          image: postgres:16-alpine
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_DB
              valueFrom: { secretKeyRef: { name: postgres-auth, key: POSTGRES_DB } }
            - name: POSTGRES_USER
              valueFrom: { secretKeyRef: { name: postgres-auth, key: POSTGRES_USER } }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: postgres-auth, key: POSTGRES_PASSWORD } }
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          args:
            # 외부 접속/보안 관련 핵심 파라미터
            - -c
            - listen_addresses=*
            - -c
            - password_encryption=scram-sha-256
          ports:
            - name: pg
              containerPort: 5432
          readinessProbe:
            exec:
              command: ["sh","-lc","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 -p 5432"]
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            exec:
              command: ["sh","-lc","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 -p 5432"]
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            requests: { cpu: "200m", memory: "512Mi" }
            limits:   { memory: "2Gi" }
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
        # ── metrics 전용 사이드카 (pods에 metrics만 추가)
        - name: postgres-exporter
          image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
          env:
            - name: DATA_SOURCE_NAME
              valueFrom:
                secretKeyRef:
                  name: postgres-auth
                  key: DATA_SOURCE_NAME
          ports:
            - name: http-metrics
              containerPort: 9400
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: local-postgres
        resources:
          requests:
            storage: 200Gi
---
# ── metrics 전용 Service 
apiVersion: v1
kind: Service
metadata:
  name: postgres-metrics
  namespace: db
  labels:
    app: postgres
    metrics: "true"
spec:
  selector:
    app: postgres
  ports:
    - name: http-metrics
      port: 9400
      targetPort: http-metrics

